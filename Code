# Loan Approval Prediction Notebook

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load Data
train = pd.read_csv('data/Training_Dataset.csv')
test = pd.read_csv('data/Test_Dataset.csv')
sample_submission = pd.read_csv('data/Sample_Submission.csv')

# EDA
print(train.head())
print(train.info())
print(train.describe())
print(train['Loan_Status'].value_counts())

# Fill Missing Values
train.fillna(train.mode().iloc[0], inplace=True)
test.fillna(train.mode().iloc[0], inplace=True)

# Encode Categorical Variables
from sklearn.preprocessing import LabelEncoder

categorical_cols = ['Gender', 'Married', 'Education', 'Self_Employed', 'Property_Area']

le = LabelEncoder()
for col in categorical_cols:
    train[col] = le.fit_transform(train[col])
    test[col] = le.transform(test[col])

train['Loan_Status'] = train['Loan_Status'].map({'Y': 1, 'N': 0})

# Split Data
X = train.drop(['Loan_ID', 'Loan_Status'], axis=1)
y = train['Loan_Status']

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Validate
y_pred = model.predict(X_val)
print("Validation Accuracy:", accuracy_score(y_val, y_pred))

# Predict Test Data
test_X = test.drop(['Loan_ID'], axis=1)
test_preds = model.predict(test_X)
test_preds = np.where(test_preds == 1, 'Y', 'N')

# Create Submission
submission = pd.DataFrame({
    'Loan_ID': test['Loan_ID'],
    'Loan_Status': test_preds
})

submission.to_csv('data/Submission.csv', index=False)
print(submission.head())
